const WIDTH=1024,HEIGHT=1024,UNIT_WIDTH=2048,UNIT_HEIGHT=2048,GRAVITY_CONSTANT=6.6743*Math.pow(10,2),SPEED=10,calculteForce=(t,e)=>{const s=t.currentPosition.distance(e.currentPosition);return console.log(s),GRAVITY_CONSTANT*(t.mass,e.mass)/Math.pow(s,2)};class Vector{constructor(t,e){this.x=0,this.y=0,this.x=t||0,this.y=e||0}get position(){return{x:(this.x+1024)/2048*1024,y:(this.y+1024)/2048*1024}}distance(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}get length(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}add(t,e){return this.x+=t,this.y+=e,this}clone(){return new Vector(this.x,this.y)}subtract(t,e){return this.x-=t,this.y-=e,this}addVector(t){return this.x+=t.x,this.y+=t.y,this}subtractVector(t){return this.x-=t.x,this.y-=t.y,this}multiply(t,e){return this.x*=t,this.y*=e||t,this}normalize(){return this.x/=this.length,this.y/=this.length,this}}class Planet{constructor(t,e,s,i,n){this.initialVelocity=new Vector,this.currentVelocity=new Vector(0,1),this.currentAcceleration=new Vector,this.currentPosition=new Vector,this.mass=1,this.massNode=null,this.velocityNode=null,this.currentVelocityNode=null,this.color=null,this.currentPosition=s,this.id=e,this.ctx=t,n&&(this.color=n),this.massNode=document.getElementById(`planet-${e}-mass`),this.currentVelocityNode=document.getElementById(`planet-${e}-current-velocity`),this.velocityNode=document.getElementById(`planet-${e}-initial-velocity`),this.currentVelocity=new Vector(0,(parseInt(this.velocityNode.value)-50)/10)}getUpdate(){var t;this.mass=Math.max(1,100*parseInt(null===(t=this.massNode)||void 0===t?void 0:t.value))}updatePosition(t){const{x:e,y:s}=this.currentVelocity,i=e*t/1e3,n=s*t/1e3;this.currentPosition.add(i,n)}updateVelocity(t,e){const s=t.filter(t=>t.id!==this.id),i=calculteForce(s[0],this),n=s[0].currentPosition.clone().subtractVector(this.currentPosition).normalize().multiply(i/this.mass);this.currentVelocity.addVector(this.currentAcceleration.addVector(n).multiply(e/1e3)),this.currentVelocityNode.innerText=Math.round(1e3*this.currentVelocity.length)/1e3+" m/s"}draw(){const{x:t,y:e}=this.currentPosition.position;this.ctx.beginPath(),this.ctx.fillStyle=this.color||"rgb(200, 0, 0)";const s=(1024+t)%1024,i=(1024+e)%1024;this.ctx.arc(s,i,Math.pow(this.mass,1/3),0,2*Math.PI),this.ctx.fill()}}const canvas=document.getElementById("canvas")||null,ctx=(null==canvas?void 0:canvas.getContext("2d"))||null,planets=[],reset=()=>{planets.splice(0,planets.length),planets.push(new Planet(ctx,1,new Vector(128,0),24,"rgb(200, 0, 0)")),planets.push(new Planet(ctx,2,new Vector(-128,0),-24,"rgb(0, 200, 0)"))};planets.splice(0,planets.length),planets.push(new Planet(ctx,1,new Vector(128,0),24,"rgb(200, 0, 0)")),planets.push(new Planet(ctx,2,new Vector(-128,0),-24,"rgb(0, 200, 0)"));let previousTime=0;const render=t=>{const e=10*(t-previousTime);previousTime=t,planets.map(t=>t.getUpdate()),planets.map(t=>t.updateVelocity(planets,e)),planets.map(t=>t.updatePosition(e)),ctx.clearRect(0,0,canvas.width,canvas.height),planets.map(t=>t.draw()),requestAnimationFrame(render)};render(0);